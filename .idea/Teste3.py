import requests
import json
import cx_Oracle
from datetime import datetime
import schedule
import time
import logging

# Configurar o sistema de log
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Função para verificar se a tabela já existe
def table_exists(cursor):
    cursor.execute("SELECT table_name FROM user_tables WHERE table_name = 'IDWALLTESTE'")
    return cursor.fetchone() is not None

# Função para realizar a atualização dos dados
def update_data():
    logging.info('Iniciando atualização dos dados...')
    # Configurar a conexão com o banco de dados Oracle
    dsn = cx_Oracle.makedsn("oracle.fiap.com.br", 1521, "orcl")

    with cx_Oracle.connect("RM87184", "111081", dsn) as connection:
        # Definir a estrutura da tabela no Oracle (se já não estiver criada)
        create_table_sql = """
        CREATE TABLE IDWALLTESTE (
            ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
            NAME VARCHAR2(100),
            DATE_OF_BIRTH DATE,
            NATIONALITIES VARCHAR2(200)
        )
        """

        try:
            with connection.cursor() as cursor:
                if not table_exists(cursor):
                    cursor.execute(create_table_sql)
                    connection.commit()
        except cx_Oracle.DatabaseError as e:
            logging.error(f"Erro ao criar a tabela: {str(e)}")

        # Loop através das páginas de 1 a 8
        for page in range(1, 8):
            # URL da página com o número de página atual
            url = f'https://ws-public.interpol.int/notices/v1/red?resultPerPage=989&page={page}'

            # Enviar uma solicitação GET para a URL
            response = requests.get(url)

            # Verificar se a solicitação foi bem-sucedida
            if response.status_code == 200:
                # Analisar o conteúdo JSON da página
                data = json.loads(response.text)

                # Acessar a lista de avisos (notices)
                notices = data['_embedded']['notices']

                # Iterar pela lista de avisos e extrair os dados desejados
                for notice in notices:
                    name = notice['forename'] + ' ' + notice['name']
                    date_of_birth_str = notice['date_of_birth']  # Obtenha a data como uma string

                    # Converta a data para o formato correto (YYYY/MM/DD)
                    try:
                        date_of_birth = datetime.strptime(date_of_birth_str, "%Y/%m/%d")
                    except ValueError:
                        date_of_birth = None  # Lidar com datas inválidas ou em formato diferente

                    # Verificar se 'nationalities' é uma lista antes de usá-la com join
                    if isinstance(notice['nationalities'], list):
                        nationalities = ', '.join(notice['nationalities'])
                    else:
                        if notice['nationalities'] is None:
                            nationalities = "Unknown"
                        else:
                            nationalities = notice['nationalities']  # Mova esta linha para dentro do bloco else

                    # Verificar se já existe um registro com os mesmos valores de NAME e DATE_OF_BIRTH
                    check_sql = "SELECT COUNT(*) FROM IDWALLTESTE WHERE NAME = :1 AND DATE_OF_BIRTH = :2"

                    with connection.cursor() as cursor:
                        cursor.execute(check_sql, (name, date_of_birth))
                        count = cursor.fetchone()[0]

                    if count == 0:
                        # Inserir os dados na tabela do Oracle
                        insert_sql = "INSERT INTO IDWALLTESTE (NAME, DATE_OF_BIRTH, NATIONALITIES) VALUES (:1, :2, :3)"

                        try:
                            with connection.cursor() as cursor:
                                cursor.execute(insert_sql, (name, date_of_birth, nationalities))
                                connection.commit()
                        except cx_Oracle.DatabaseError as e:
                            logging.error(f"Erro ao inserir dados: {str(e)}")
                    # else:
                    #     logging.info(f"Dados duplicados para {name} ({date_of_birth}). Ignorando.")

            else:
                logging.error(f"Falha ao acessar a página {page}: {response.status_code}")

    logging.info('Atualização dos dados concluída.')

# Agendar a função para ser executada a cada 50 segundos
schedule.every(50).seconds.do(update_data)

try:
    while True:
        schedule.run_pending()
        time.sleep(1)
except KeyboardInterrupt:
    logging.info('Programa interrompido pelo usuário.')
